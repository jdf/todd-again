// Code generated by protoc-gen-imgui. DO NOT EDIT.
package proto

import "github.com/inkyblackness/imgui-go/v4"

var (
	tmpFloat32 float32
	tmpColor   = [3]float32{0, 0, 0}
)

func RenderTuning(p *Tuning) {
	if imgui.CollapsingHeader("World") {

		{
			tmpFloat32 = p.World.GetGravity()
			imgui.SliderFloat("Gravity", &tmpFloat32, -2000, -100)
			if p.World.Gravity == nil {
				var f float32
				p.World.Gravity = &f
			}
			*p.World.Gravity = tmpFloat32
		}

		{
			if p.World.Bg == nil {
				p.World.Bg = &Color{
					C: []float32{0, 0, 0},
				}
			}
			imgui.ColorEdit3("Bg", &tmpColor)
			p.World.Bg.C = tmpColor[:]
		}
	}
	if imgui.CollapsingHeader("Todd") {

		{
			if p.Todd.Color == nil {
				p.Todd.Color = &Color{
					C: []float32{0, 0, 0},
				}
			}
			imgui.ColorEdit3("Color", &tmpColor)
			p.Todd.Color.C = tmpColor[:]
		}

		{
			tmpFloat32 = p.Todd.GetSideLength()
			imgui.SliderFloat("SideLength", &tmpFloat32, 15, 60)
			if p.Todd.SideLength == nil {
				var f float32
				p.Todd.SideLength = &f
			}
			*p.Todd.SideLength = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetFriction()
			imgui.SliderFloat("Friction", &tmpFloat32, 0.9, 1)
			if p.Todd.Friction == nil {
				var f float32
				p.Todd.Friction = &f
			}
			*p.Todd.Friction = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetBearingFriction()
			imgui.SliderFloat("BearingFriction", &tmpFloat32, 0.9, 1)
			if p.Todd.BearingFriction == nil {
				var f float32
				p.Todd.BearingFriction = &f
			}
			*p.Todd.BearingFriction = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetMaxVelocity()
			imgui.SliderFloat("MaxVelocity", &tmpFloat32, 100, 350)
			if p.Todd.MaxVelocity == nil {
				var f float32
				p.Todd.MaxVelocity = &f
			}
			*p.Todd.MaxVelocity = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetAcceleration()
			imgui.SliderFloat("Acceleration", &tmpFloat32, 200, 2000)
			if p.Todd.Acceleration == nil {
				var f float32
				p.Todd.Acceleration = &f
			}
			*p.Todd.Acceleration = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetAirBending()
			imgui.SliderFloat("AirBending", &tmpFloat32, 200, 800)
			if p.Todd.AirBending == nil {
				var f float32
				p.Todd.AirBending = &f
			}
			*p.Todd.AirBending = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetBearingAcceleration()
			imgui.SliderFloat("BearingAcceleration", &tmpFloat32, 200, 2000)
			if p.Todd.BearingAcceleration == nil {
				var f float32
				p.Todd.BearingAcceleration = &f
			}
			*p.Todd.BearingAcceleration = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetJumpImpulse()
			imgui.SliderFloat("JumpImpulse", &tmpFloat32, 100, 800)
			if p.Todd.JumpImpulse == nil {
				var f float32
				p.Todd.JumpImpulse = &f
			}
			*p.Todd.JumpImpulse = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetMaxSquishVelocity()
			imgui.SliderFloat("MaxSquishVelocity", &tmpFloat32, 20, 120)
			if p.Todd.MaxSquishVelocity == nil {
				var f float32
				p.Todd.MaxSquishVelocity = &f
			}
			*p.Todd.MaxSquishVelocity = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetJumpTerminalVelocity()
			imgui.SliderFloat("JumpTerminalVelocity", &tmpFloat32, -600, -100)
			if p.Todd.JumpTerminalVelocity == nil {
				var f float32
				p.Todd.JumpTerminalVelocity = &f
			}
			*p.Todd.JumpTerminalVelocity = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetTerminalVelocity()
			imgui.SliderFloat("TerminalVelocity", &tmpFloat32, -1000, -100)
			if p.Todd.TerminalVelocity == nil {
				var f float32
				p.Todd.TerminalVelocity = &f
			}
			*p.Todd.TerminalVelocity = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetEyeCenteringDurationSeconds()
			imgui.SliderFloat("EyeCenteringDurationSeconds", &tmpFloat32, 0, 3)
			if p.Todd.EyeCenteringDurationSeconds == nil {
				var f float32
				p.Todd.EyeCenteringDurationSeconds = &f
			}
			*p.Todd.EyeCenteringDurationSeconds = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetJumpStateGravityFactor()
			imgui.SliderFloat("JumpStateGravityFactor", &tmpFloat32, 0.2, 1)
			if p.Todd.JumpStateGravityFactor == nil {
				var f float32
				p.Todd.JumpStateGravityFactor = &f
			}
			*p.Todd.JumpStateGravityFactor = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetAirFriction()
			imgui.SliderFloat("AirFriction", &tmpFloat32, 0.85, 1)
			if p.Todd.AirFriction == nil {
				var f float32
				p.Todd.AirFriction = &f
			}
			*p.Todd.AirFriction = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetJumpRequestSlopSeconds()
			imgui.SliderFloat("JumpRequestSlopSeconds", &tmpFloat32, 0, 0.5)
			if p.Todd.JumpRequestSlopSeconds == nil {
				var f float32
				p.Todd.JumpRequestSlopSeconds = &f
			}
			*p.Todd.JumpRequestSlopSeconds = tmpFloat32
		}

		{
			tmpFloat32 = p.Todd.GetGroundingSlopSeconds()
			imgui.SliderFloat("GroundingSlopSeconds", &tmpFloat32, 0, 0.5)
			if p.Todd.GroundingSlopSeconds == nil {
				var f float32
				p.Todd.GroundingSlopSeconds = &f
			}
			*p.Todd.GroundingSlopSeconds = tmpFloat32
		}
		if imgui.CollapsingHeader("Blink") {

			{
				tmpFloat32 = p.Todd.Blink.GetOdds()
				imgui.SliderFloat("Odds", &tmpFloat32, 1e-05, 0.001)
				if p.Todd.Blink.Odds == nil {
					var f float32
					p.Todd.Blink.Odds = &f
				}
				*p.Todd.Blink.Odds = tmpFloat32
			}

			{
				tmpFloat32 = p.Todd.Blink.GetCycleSeconds()
				imgui.SliderFloat("CycleSeconds", &tmpFloat32, 0, 2)
				if p.Todd.Blink.CycleSeconds == nil {
					var f float32
					p.Todd.Blink.CycleSeconds = &f
				}
				*p.Todd.Blink.CycleSeconds = tmpFloat32
			}
		}
	}
	if imgui.CollapsingHeader("Camera") {

		{
			tmpFloat32 = p.Camera.GetTiltSeconds()
			imgui.SliderFloat("TiltSeconds", &tmpFloat32, 0, 0.8)
			if p.Camera.TiltSeconds == nil {
				var f float32
				p.Camera.TiltSeconds = &f
			}
			*p.Camera.TiltSeconds = tmpFloat32
		}
	}
}
